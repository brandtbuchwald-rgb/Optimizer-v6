const state={rules:null,slots:{}};
function el(tag,cls,html){const e=document.createElement(tag);if(cls)e.className=cls;if(html!=null)e.innerHTML=html;return e;}
function onSlotChange(e){const [slot,key]=e.target.name.split(":");state.slots[slot]=state.slots[slot]||{};state.slots[slot][key]=e.target.value;renderPreview();}
function slotTemplate(slot){const card=el("div","card");card.appendChild(el("h3",null,slot));
// tier
const tierRow=el("div","row");tierRow.appendChild(el("label",null,"Tier"));const sel=el("select");state.rules.tiers.forEach(t=>sel.appendChild(new Option(t,t)));sel.name=`${slot}:tier`;sel.addEventListener("input",onSlotChange);tierRow.appendChild(sel);card.appendChild(tierRow);
// rune
const runeRow=el("div","row");runeRow.appendChild(el("label",null,"Rune"));const runeSel=el("select");["","ATK SPD","Crit Chance","Evasion","DR"].forEach(r=>runeSel.appendChild(new Option(r,r)));runeSel.name=`${slot}:rune`;runeSel.addEventListener("input",onSlotChange);runeRow.appendChild(runeSel);card.appendChild(runeRow);
// special
const spRow=el("div","row");spRow.appendChild(el("label",null,"Special"));const spSel=el("select");["","Crit DMG +80%","HP% +52%","Boss DMG","Racial DMG"].forEach(opt=>spSel.appendChild(new Option(opt,opt)));spSel.name=`${slot}:special`;spSel.addEventListener("input",onSlotChange);spRow.appendChild(spSel);card.appendChild(spRow);
// lines
const stats=["","ATK SPD","Crit Chance","Evasion","ATK%","Crit DMG%","HP%","DEF%","DR%"];const maxLines=slot==="Weapon"?3:4;for(let i=1;i<=maxLines;i++){const row=el("div","row");const statSel=el("select");stats.forEach(opt=>statSel.appendChild(new Option(opt,opt)));statSel.name=`${slot}:line${i}:stat`;statSel.addEventListener("input",onSlotChange);const val=el("input");val.type="number";val.step="1";val.min="0";val.name=`${slot}:line${i}:value`;val.addEventListener("input",onSlotChange);row.appendChild(statSel);row.appendChild(val);card.appendChild(row);}return card;}
function renderSlots(){const grid=document.getElementById("slotsGrid");grid.innerHTML="";state.rules.slots.forEach(slot=>grid.appendChild(slotTemplate(slot)));}
function computeTotals(){const totals={AS:0,CR:0,EV:0,DR:0};for(const slot in state.slots){const s=state.slots[slot];for(let i=1;i<=4;i++){const stat=s[`line${i}:stat`];const val=+s[`line${i}:value`]||0;if(stat==="Crit Chance")totals.CR+=val;if(stat==="Evasion")totals.EV+=val;if(stat==="DR%")totals.DR+=val;if(stat==="ATK SPD")totals.AS+=val;}if(s.rune==="Crit Chance")totals.CR+=12;if(s.rune==="Evasion")totals.EV+=12;if(s.rune==="DR")totals.DR+=12;if(s.rune==="ATK SPD")totals.AS+=6;}totals.CR=Math.min(totals.CR,state.rules.caps.critFromGearRune);totals.EV=Math.min(totals.EV,state.rules.caps.evaFromGearRune);totals.DR=Math.min(totals.DR,state.rules.caps.tankDRTarget);return totals;}
function renderPreview(){const totals=computeTotals();document.getElementById("scAS").textContent=totals.AS+"%";document.getElementById("scCR").textContent=totals.CR+"%";document.getElementById("scEV").textContent=totals.EV+"%";document.getElementById("scDR").textContent=totals.DR+"%";const wrap=document.getElementById("scSlots");wrap.innerHTML="";state.rules.slots.forEach(slot=>{const s=state.slots[slot]||{};const box=el("div","sc-slot");box.innerHTML=`<strong>${slot}</strong><br>${s.tier||""}<br>${s.special||""}`;wrap.appendChild(box);});}
async function boot(){state.rules=await fetch("rules.json").then(r=>r.json());renderSlots();renderPreview();document.getElementById("btnExport").addEventListener("click",async()=>{const node=document.getElementById("shareCard");const canvas=await html2canvas(node,{backgroundColor:null,scale:2});const url=canvas.toDataURL("image/png");const a=document.createElement("a");a.href=url;a.download="build.png";a.click();});}
document.addEventListener("DOMContentLoaded",boot);
